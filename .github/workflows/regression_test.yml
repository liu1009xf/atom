name: Unit Test

on: 
  push:
  pull_request:
    branches: [ main ]

env:
  BUILD_TYPE: Release

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
    - uses: actions/checkout@v2
    
    - uses: actions/setup-python@v2
      with:
        python-version: '3.7' 
    
    - name: Install Compiler Linux
      if: runner.os == 'Linux'
      run: |
          sudo apt update
          sudo apt install gcc-10 g++-10
      shell: bash

    - name: Install Conan
      id: conan
      uses: turtlebrowser/get-conan@main

    - name: Create Build Environment
      run: cmake -E make_directory ${{runner.workspace}}/_build

    - name: New Conan Profile
      working-directory: ${{runner.workspace}}/_build
      run: conan profile new default --detect
      shell: bash

    - name: Config conan to Linux
      if: runner.os == 'Linux'
      working-directory: ${{runner.workspace}}/_build
      run: |
        conan profile update settings.compiler.libcxx=libstdc++11 default
        conan profile update settings.compiler.version=10 default
      shell: bash

    - name: Config conan macOS
      if: runner.os == 'macOS'
      working-directory: ${{runner.workspace}}/_build
      run: conan profile update settings.compiler.libcxx=libc++ default
      shell: bash

    - name: Set conan to windows
      if: runner.os == 'Windows'
      working-directory: ${{runner.workspace}}/_build
      run: conan profile update settings.compiler="Visual Studio" default
      shell: bash

    - name: Install Test Dependencies Windows
      if: runner.os == 'Windows'
      working-directory: ${{runner.workspace}}/_build
      run: conan install ../atom/ --build missing
      shell: bash

    - name: Install Test Dependencies non Windows
      if: runner.os != 'Windows'
      working-directory: ${{runner.workspace}}/_build
      run: conan install ${{github.workspace}} --build missing
      shell: bash

    - name: Configure CMake Linux
      if: runner.os == 'Linux'
      shell: bash
      working-directory: ${{runner.workspace}}/_build
      run: cmake $GITHUB_WORKSPACE \
      env:
        CC:   gcc-10
        CXX:  g++-10

    - name: Configure CMake
      if: runner.os != 'Linux'
      shell: bash
      working-directory: ${{runner.workspace}}/_build
      run: cmake $GITHUB_WORKSPACE

    - name: Build
      if: runner.os != 'Windows'
      working-directory: ${{runner.workspace}}/_build
      shell: bash
      run: cmake --build . -j 8

    - name: Build Windows
      if: runner.os == 'Windows'
      working-directory: ${{runner.workspace}}/_build
      shell: bash
      run: cmake --build . --config $BUILD_TYPE -j 8

    - name: CPP Unit Test
      if: runner.os != 'Windows'
      working-directory: ${{runner.workspace}}/_build
      shell: bash
      run: ctest -R atom_test --verbose --timeout 600
    
    - name: CPP Unit Test Windows
      if: runner.os == 'Windows'
      working-directory: ${{runner.workspace}}/_build
      shell: bash
      run: ctest -R atom_test -C $BUILD_TYPE --verbose --timeout 600
